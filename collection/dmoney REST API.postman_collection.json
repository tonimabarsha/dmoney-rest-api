{
	"info": {
		"_postman_id": "36abc399-a317-4410-bd21-c0abb044e43f",
		"name": "dmoney REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42752292",
		"_collection_link": "https://www.postman.com/barshamoni/workspace/my-workspace/collection/42752292-36abc399-a317-4410-bd21-c0abb044e43f?action=share&source=collection_link&creator=42752292"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse=pm.response.json();\r",
									"pm.collectionVariables.set(\"token\",jsonResponse.token)\r",
									"\r",
									"pm.test(\"Verify user login is successfull\", function(){\r",
									"    pm.expect(jsonResponse.message).contains(\"Login successful\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"admin@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Login with wrong creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse=pm.response.json();\r",
									"\r",
									"pm.test(\"Verify invalid credentials\", function(){\r",
									"    pm.expect(jsonResponse.message).contains(\"User not found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"adminroadtocareer.net\",\r\n    \"password\":\"123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create User",
			"item": [
				{
					"name": "Create an Agent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash =require('lodash')\r",
									"\r",
									"const prefix=\"0131\"\r",
									"const randomNumber= lodash.random(1000000,9999999)\r",
									"const agentPhoneNumber=prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"agentPhoneNumber\",agentPhoneNumber)\r",
									"//pm.environment.set(\"agentPhoneNumber\",agentPhoneNumber)\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"agentAccNumber\",jsonResponse.user.phone_number)\r",
									"\r",
									"pm.test(\"Verify agent is created\", function () {\r",
									"    const responseData = jsonResponse;\r",
									"    pm.expect(responseData.message).contains(\"User created\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"12357\",\r\n    \"phone_number\":\"{{agentPhoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create an existing Agent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify Login with invalid credendentials\",()=>{ //Changed test description\r",
									"    const responseData = jsonResponse;\r",
									"    pm.expect(responseData.message).contains(\"User already exists\");\r",
									"})\r",
									"pm.test(\"Status code is 208\", function () { //Changed test description and status code\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"12357\",\r\n    \"phone_number\":\"{{agentPhoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash = require('lodash')\r",
									"const prefix=\"0181\"\r",
									"const randomNumber= lodash.random(1000000,8888888)\r",
									"const customer1PhoneNumber=prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"customer1PhoneNumber\",customer1PhoneNumber)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"customer1AccNumber\",jsonResponse.user.phone_number)\r",
									"\r",
									"pm.test(\"Verify customer 1 is created\",()=>{ //Changed test description\r",
									"    const responseData = jsonResponse;\r",
									"    pm.expect(responseData.message).contains(\"User created\");\r",
									"})\r",
									"pm.test(\"Status code is 201\", function () { //Changed test description and status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"12357\",\r\n    \"phone_number\":\"{{customer1PhoneNumber}}\",\r\n    \"nid\":\"123456785\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create existing Customer 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify customer 1 is already exists\",()=>{ //Changed test description\r",
									"    const responseData = jsonResponse;\r",
									"    pm.expect(responseData.message).contains(\"User already exists\");\r",
									"})\r",
									"pm.test(\"Status code is 208\", function () { //Changed test description and status code\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"12357\",\r\n    \"phone_number\":\"{{customer1PhoneNumber}}\",\r\n    \"nid\":\"123456783\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash = require('lodash')\r",
									"const prefix=\"0172\"\r",
									"const randomNumber= lodash.random(1000000,8888888)\r",
									"const customer2PhoneNumber=prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"customer2PhoneNumber\",customer2PhoneNumber)"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"customer2AccNumber\",jsonResponse.user.phone_number)\r",
									"\r",
									"\r",
									"pm.test(\"Verify customer 2 is created\",()=>{ //Changed test description\r",
									"    const responseData = jsonResponse;\r",
									"    pm.expect(responseData.message).contains(\"User created\");\r",
									"})\r",
									"pm.test(\"Status code is 201\", function () { //Changed test description and status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"12357\",\r\n    \"phone_number\":\"{{customer2PhoneNumber}}\",\r\n    \"nid\":\"123456786\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create existing Customer 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify customer 2 is already exists\",()=>{ //Changed test description\r",
									"    const responseData = jsonResponse;\r",
									"    pm.expect(responseData.message).contains(\"User already exists\");\r",
									"})\r",
									"pm.test(\"Status code is 208\", function () { //Changed test description and status code\r",
									"    pm.response.to.have.status(208);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"12357\",\r\n    \"phone_number\":\"{{customer2PhoneNumber}}\",\r\n    \"nid\":\"123456783\",\r\n    \"role\":\"Customer\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const lodash =require('lodash')\r",
									"\r",
									"const prefix=\"0191\"\r",
									"const randomNumber= lodash.random(1000000,9999999)\r",
									"const merchantPhoneNumber=prefix+randomNumber;\r",
									"pm.collectionVariables.set(\"merchantPhoneNumber\",merchantPhoneNumber)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"merchantAccNumber\",jsonResponse.user.phone_number)\r",
									"\r",
									"pm.test(\"Verify merchant is created\",()=>{ //Changed test description\r",
									"    const responseData = jsonResponse;\r",
									"    pm.expect(responseData.message).contains(\"User created\");\r",
									"})\r",
									"pm.test(\"Status code is 201\", function () { //Changed test description and status code\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"12357\",\r\n    \"phone_number\":\"{{merchantPhoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Merchant\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Existing Merchant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonResponse = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify merchant is created\",()=>{ //Changed test description\r",
									"    const responseData = jsonResponse;\r",
									"    pm.expect(responseData.message).contains(\"User already exists\");\r",
									"})\r",
									"pm.test(\"Status code is 208\", function () { //Changed test description and status code\r",
									"    pm.response.to.have.status(208);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "bearer{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"12357\",\r\n    \"phone_number\":\"{{merchantPhoneNumber}}\",\r\n    \"nid\":\"123456789\",\r\n    \"role\":\"Agent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Deposit money",
					"item": [
						{
							"name": "Deposit money SYSTEM to Agent with low balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify that deposit fails if the amount is below 10 TK.\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Minimum deposit amount is 10 tk\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agentAccNumber}}\",\r\n  \"amount\": 6\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit money SYSTEM to Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify that Admin can successfully deposit money from the SYSTEM account to an Agent within the allowed range \", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Deposit successful\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agentAccNumber}}\",\r\n  \"amount\": 10000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit Money SYSTEM to Agent with exceeded balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify that deposit fails if the amount is above 10000 TK\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Limit exceeded\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"SYSTEM\",\r\n  \"to_account\": \"{{agentAccNumber}}\",\r\n  \"amount\": 10005\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Agent balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Agent balance after deposit from SYSTEM\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"User balance\");\r",
											"});\r",
											"pm.test(\"Balance should increase\", function () {\r",
											"    pm.expect(jsonResponse.balance).to.above(10);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{agentAccNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{agentAccNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit money from Agent to Customer 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Agent can successfully deposit money to Customer account\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Deposit successful\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agentAccNumber}}\",\r\n  \"to_account\": \"{{customer1AccNumber}}\",\r\n  \"amount\": 8000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit money from Agent to invalid customer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Agent can not deposit money to ivalid Customer account\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"To Account does not exist\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agentAccNumber}}\",\r\n  \"to_account\": \"{{0382665488}}\",\r\n  \"amount\": 5000\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deposit money from Agent to customer with insufficient balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Agent can not deposit money with insufficient balance\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Insufficient balance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{agentAccNumber}}\",\r\n  \"to_account\": \"{{customer1AccNumber}}\",\r\n  \"amount\": 50000\r\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/deposit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"deposit"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Agent balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Agent balance after deposit from SYSTEM\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Balance should decrease\", function () {\r",
											"    pm.expect(jsonResponse.balance).to.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{agentAccNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{agentAccNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check  Customer 1 balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Check customer 1 balance after deposit from Agent\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"User balance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Balance should increase\", function () {\r",
											"    pm.expect(jsonResponse.balance).to.above(10);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer1AccNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer1AccNumber}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Send Money",
					"item": [
						{
							"name": "Send Money C1 to C2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Customer 2 can successfully send money to Customer 2 account\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Send money successful\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1AccNumber}}\",\r\n  \"to_account\": \"{{customer2AccNumber}}\",\r\n  \"amount\": 7000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Money C1 to C2 more than available balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify that a Customer cannot send more money than their available balance\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Insufficient balance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1AccNumber}}\",\r\n  \"to_account\": \"{{customer2AccNumber}}\",\r\n  \"amount\": 9000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Money C1 to invalid acc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Send Money to Invalid Account\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"To Account does not exist\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1AccNumber}}\",\r\n  \"to_account\": \"276645337\",\r\n  \"amount\": 500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/sendmoney",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"sendmoney"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check  Customer 1 balance Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();\r",
											"pm.test(\"Verify Customer 1 balance after deposit from Customer 2\", function () {\r",
											"    pm.expect(jsonResponse.message).contains(\"\");\r",
											"});\r",
											"pm.test(\"Balance should decrease\", function () {\r",
											"    pm.expect(jsonResponse.balance).to.below(10000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer1AccNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer1AccNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check  Customer 2 balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Customer 2 balance after deposit from Customer 1\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"User balance\");\r",
											"});\r",
											"pm.test(\"Balamce should increase\", function () {\r",
											"    pm.expect(jsonResponse.balance).to.above(10);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer2AccNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer2AccNumber}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Withdraw Money",
					"item": [
						{
							"name": "Withdraw Money C1 to Agent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Withdraw any amount from a Customer 1 to the Agent\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Withdraw successful\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1AccNumber}}\",\r\n  \"to_account\": \"{{agentAccNumber}}\",\r\n  \"amount\": 500\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw Money C1 to Agent more than available balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify that a Customer cannot withdraw more money than their available balance\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Insufficient balance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1AccNumber}}\",\r\n  \"to_account\": \"{{agentAccNumber}}\",\r\n  \"amount\": 5000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Withdraw Money C1 to Agent with min limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify that a withdrawal fails if the amount is below the minimum limit\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Minimum withdraw amount is 10 tk\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1AccNumber}}\",\r\n  \"to_account\": \"{{agentAccNumber}}\",\r\n  \"amount\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/withdraw",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"withdraw"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check  Customer 1 balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify customer 1 balance after transaction\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Balance should decrease\", function(){\r",
											"    pm.expect(jsonResponse.balance).to.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer1AccNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer1AccNumber}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Payment Merchant",
					"item": [
						{
							"name": "Payment Merchant from C2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify that a Customer 2 can successfully make a payment to a Merchant\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Payment successful\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer2AccNumber}}\",\r\n  \"to_account\": \"{{merchantAccNumber}}\",\r\n  \"amount\": 2000\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Payment Merchant from C2 below min limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify that a withdrawal fails if the amount is below the minimum limit\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"Minimum Payment amount is 10 tk\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 208\", function () {\r",
											"    pm.response.to.have.status(208);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "ROADTOSDET",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"from_account\": \"{{customer1AccNumber}}\",\r\n  \"to_account\": \"{{merchantAccNumber}}\",\r\n  \"amount\": 5\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transaction/payment",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"payment"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check  Customer 2 balance Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify customer 2 balance\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"\");\r",
											"});\r",
											"pm.test(\"Balance should decrease\", function () {\r",
											"    pm.expect(jsonResponse.balance).to.below(10000);\r",
											"});\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{customer2AccNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{customer2AccNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check  Customer 2 transaction details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse=pm.response.json();\r",
											"pm.test(\"Verify Agent balance after deposit from SYSTEM\", function(){\r",
											"    pm.expect(jsonResponse.message).contains(\"\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/statement/{{customer2AccNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"statement",
										"{{customer2AccNumber}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check  Merchant balance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonResponse = pm.response.json();\r",
											"pm.test(\"Verify message for user balance\", function () {\r",
											"    pm.expect(jsonResponse.message).to.equal(\"User balance\");\r",
											"});\r",
											"\r",
											"pm.test(\"Balance should increase\", function () {\r",
											"    pm.expect(jsonResponse.balance).to.be.below(10000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "X-AUTH-SECRET-KEY",
										"value": "{{secretKey}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transaction/balance/{{merchantAccNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transaction",
										"balance",
										"{{merchantAccNumber}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://dmoney.roadtocareer.net"
		},
		{
			"key": "secretKey",
			"value": "ROADTOSDET"
		},
		{
			"key": "token",
			"value": "{{vault:json-web-token}}"
		},
		{
			"key": "agentPhoneNumber",
			"value": "01319525904"
		},
		{
			"key": "customer1PhoneNumber",
			"value": "01818828572"
		},
		{
			"key": "customer1AccNumber",
			"value": "01818828572"
		},
		{
			"key": "customer2PhoneNumber",
			"value": "01722464052"
		},
		{
			"key": "customer2AccNumber",
			"value": "01722464052"
		},
		{
			"key": "merchantPhoneNumber",
			"value": "01915346536"
		},
		{
			"key": "merchantAccNumber",
			"value": "01915346536"
		},
		{
			"key": "agentAccNumber",
			"value": "01319525904"
		}
	]
}